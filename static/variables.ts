// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString, vModelRadio as _vModelRadio, vModelText as _vModelText, withDirectives as _withDirectives } from 'vue'
// tslint:disable
/* eslint-disable */

export function appTemplateHtml(_ctx, _cache) {
  const _component_file_uploader = _resolveComponent("file-uploader")
  const _component_relative_time = _resolveComponent("relative-time")

  return (_openBlock(), _createBlock("div", null, [
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode("h4", null, "Copy-Tool")
      ])
    ]),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode("input", {
          class: "form-control",
          value: _ctx.room,
          onChange: _cache[1] || (_cache[1] = $event => (_ctx.changeRoom($event.target.value)))
        }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
      ])
    ]),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _withDirectives(_createVNode("textarea", {
          class: "form-control",
          rows: "5",
          "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => (_ctx.newText = $event))
        }, null, 512 /* NEED_PATCH */), [
          [_vModelText, _ctx.newText]
        ])
      ])
    ]),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode("button", {
          class: "btn btn-primary copy-button",
          onClick: _cache[3] || (_cache[3] = $event => (_ctx.copyText()))
        }, _toDisplayString(_ctx.buttonText), 1 /* TEXT */)
      ])
    ]),
    (_ctx.canCreateOffer)
      ? (_openBlock(), _createBlock("div", {
          key: 0,
          class: "row"
        }, [
          _createVNode("div", { class: "col-md-12" }, [
            _createVNode("button", {
              class: "btn btn-default copy-button",
              onClick: _cache[4] || (_cache[4] = $event => (_ctx.tryToConnect()))
            }, "try to connect")
          ])
        ]))
      : _createCommentVNode("v-if", true),
    (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.files, (file, index) => {
      return (_openBlock(), _createBlock("div", {
        class: "row",
        key: index
      }, [
        _createVNode("div", { class: "col-md-12" }, [
          _createVNode("div", { class: "progress" }, [
            _createVNode("div", {
              class: "progress-bar progress-bar-success",
              role: "progressbar",
              "aria-valuenow": file.progress,
              "aria-valuemin": "0",
              "aria-valuemax": "100",
              style: 'width:' + file.progress + '%'
            }, _toDisplayString(file.fileName), 13 /* TEXT, STYLE, PROPS */, ["aria-valuenow"])
          ])
        ])
      ]))
    }), 128 /* KEYED_FRAGMENT */)),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[5] || (_cache[5] = $event => (_ctx.speed = $event)),
            value: "10"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 100KB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[6] || (_cache[6] = $event => (_ctx.speed = $event)),
            value: "20"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 200KB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[7] || (_cache[7] = $event => (_ctx.speed = $event)),
            value: "50"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 500KB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[8] || (_cache[8] = $event => (_ctx.speed = $event)),
            value: "100"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 1MB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[9] || (_cache[9] = $event => (_ctx.speed = $event)),
            value: "200"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 2MB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[10] || (_cache[10] = $event => (_ctx.speed = $event)),
            value: "500"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 5MB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[11] || (_cache[11] = $event => (_ctx.speed = $event)),
            value: "1000"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" 10MB/s")
        ]),
        _createVNode("label", { class: "radio-inline" }, [
          _withDirectives(_createVNode("input", {
            type: "radio",
            "onUpdate:modelValue": _cache[12] || (_cache[12] = $event => (_ctx.speed = $event)),
            value: "Infinity"
          }, null, 512 /* NEED_PATCH */), [
            [_vModelRadio, _ctx.speed]
          ]),
          _createTextVNode(" No limit(Will block the UI)")
        ])
      ])
    ]),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode(_component_file_uploader, {
          onFileGot: _cache[13] || (_cache[13] = $event => (_ctx.fileGot($event))),
          multiple: "true",
          locale: _ctx.locale
        }, null, 8 /* PROPS */, ["locale"])
      ])
    ]),
    _createVNode("div", { class: "row" }, [
      _createVNode("div", { class: "col-md-12" }, [
        _createVNode("ul", null, [
          (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.acceptMessages, (message, index) => {
            return (_openBlock(), _createBlock("li", {
              key: message.id
            }, [
              _createVNode("span", { class: "label label-default" }, [
                _createVNode(_component_relative_time, {
                  time: message.moment
                }, null, 8 /* PROPS */, ["time"])
              ]),
              _createVNode("span", { class: "label label-info" }, _toDisplayString(message.kind), 1 /* TEXT */),
              (message.kind === 'text')
                ? (_openBlock(), _createBlock("button", {
                    key: 0,
                    class: "btn btn-xs btn-default clipboard",
                    "data-clipboard-target": '#clipboard_' + message.id
                  }, "copy", 8 /* PROPS */, ["data-clipboard-target"]))
                : _createCommentVNode("v-if", true),
              (message.kind === 'text')
                ? (_openBlock(), _createBlock("pre", {
                    key: 1,
                    id: 'clipboard_' + message.id
                  }, _toDisplayString(message.value), 9 /* TEXT, PROPS */, ["id"]))
                : _createCommentVNode("v-if", true),
              (message.kind === 'file')
                ? (_openBlock(), _createBlock("a", {
                    key: 2,
                    class: "btn btn-link",
                    href: message.url,
                    download: message.value.name
                  }, _toDisplayString(message.value.name), 9 /* TEXT, PROPS */, ["href", "download"]))
                : _createCommentVNode("v-if", true),
              (message.kind === 'base64')
                ? (_openBlock(), _createBlock("a", {
                    key: 3,
                    class: "btn btn-link",
                    href: message.url,
                    download: message.name
                  }, _toDisplayString(message.name), 9 /* TEXT, PROPS */, ["href", "download"]))
                : _createCommentVNode("v-if", true)
            ]))
          }), 128 /* KEYED_FRAGMENT */))
        ])
      ])
    ])
  ]))
}
/* eslint-enable */
// tslint:enable
